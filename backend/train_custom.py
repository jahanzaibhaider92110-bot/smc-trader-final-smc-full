# path: backend/train_custom.py
import pandas as pd
import joblib
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
import os

DATA_PATH = "data/features_5m.parquet"  # or features generated by scripts
OUT_MODEL = os.path.join("models", "smc_model_5m.pkl")

def train_5m():
    print("Loading features:", DATA_PATH)
    df = pd.read_parquet(DATA_PATH).dropna()
    # auto detect label column
    if "label" not in df.columns:
        raise RuntimeError("features_5m.parquet must contain 'label' column")
    feature_cols = [c for c in df.columns if c not in ("ts", "label", "signal", "reason")]
    X = df[feature_cols]
    y = df["label"].astype(int)

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)
    model = RandomForestClassifier(n_estimators=300, random_state=42, n_jobs=-1)
    print("Training...")
    model.fit(X_train, y_train)
    print("Evaluating...")
    y_pred = model.predict(X_test)
    print(classification_report(y_test, y_pred))
    os.makedirs("models", exist_ok=True)
    joblib.dump(model, OUT_MODEL)
    print("Saved model:", OUT_MODEL)

if __name__ == "__main__":
    train_5m()
